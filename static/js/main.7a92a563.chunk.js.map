{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","console","log","className","onClick","onClickCallback","id","value","Board","squareList","squares","singleArraySquares","concat","map","square","key","generateSquares","row","col","currentId","push","App","useState","setSquares","currentPlayer","setCurrentPlayer","numSquaresFilled","setNumSquaresFilled","winner","setWinner","newSquares","found","currentSquare","i","checkForWinner","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7a92a563.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n  console.log(props)\n\n  return <button\n    className=\"square\"\n    onClick={() => props.onClickCallback(props.id)}\n  >\n    {props.value}\n  </button>\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquares = (squares, onClickCallback) => {\n  const singleArraySquares = [].concat(...squares);\n  console.log(squares);\n  console.log(singleArraySquares);\n  return singleArraySquares.map((square) => {\n    return <Square\n      value={square.value}\n      id={square.id}\n      onClickCallback={onClickCallback}\n      key={square.id}\n    />\n  });\n}\n\nconst Board = ({ squares, onClickCallback }) => {\n\n  const squareList = generateSquares(squares, onClickCallback);\n  console.log(squareList);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    value: PropTypes.string.isRequired\n  }))),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'x';\nconst PLAYER_2 = 'o';\n\nconst generateSquares = () => {\n  const squares = [];\n  let row = 0;\n  let col = 0;\n  let currentId = 0;\n  console.log(`row = ${ row }`);\n\n  while (row < 3) {\n    squares.push([]);\n    while (col < 3) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      col += 1;\n      currentId += 1;\n    }\n    row += 1;\n    col = 0;\n  }\n\n  return squares;\n}\n\nconst App = () => {\n\n  const [squares, setSquares] = useState(generateSquares());\n  const [currentPlayer, setCurrentPlayer] = useState(PLAYER_1);\n  const [numSquaresFilled, setNumSquaresFilled] = useState(0);\n  const [winner, setWinner] = useState(null);\n\n  const checkForWinner = () => {\n    let i = 0;\n\n    // Check all the rows and columns for a winner\n    while (i < 3) {\n      if (squares[i][0].value === squares[i][1].value &&\n        squares[i][2].value === squares[i][1].value &&\n        squares[i][0].value !== '') {\n        return squares[i][0].value;\n      } else if (squares[0][i].value === squares[1][i].value &&\n        squares[2][i].value === squares[1][i].value &&\n        squares[0][i].value !== '') {\n        return squares[0][i].value;\n      }\n      i += 1;\n    }\n    if (squares[0][0].value === squares[1][1].value &&\n      squares[2][2].value === squares[1][1].value &&\n      squares[1][1].value !== '') {\n      return squares[0][0].value;\n    }\n\n    if (squares[0][2].value === squares[1][1].value &&\n      squares[2][0].value === squares[1][1].value &&\n      squares[1][1].value !== '') {\n      return squares[0][2].value;\n    }\n\n    return null;\n  }\n  const updateSquares = (id) => {\n    if (winner !== null) return;\n\n    const newSquares = [...squares];\n    let row = 0;\n    let col = 0;\n    let found = false;\n\n    while (row < 3 && !found) {\n      while (col < 3 && !found) {\n        let currentSquare = newSquares[row][col];\n        if (currentSquare.id === id) {\n          console.log(currentSquare);\n          if (currentSquare.value !== '') return;\n\n          found = true;\n          currentSquare.value = currentPlayer;\n          setNumSquaresFilled(numSquaresFilled + 1);\n          if (currentPlayer === PLAYER_1) {\n            setCurrentPlayer(PLAYER_2)\n          } else {\n            setCurrentPlayer(PLAYER_1);\n          }\n        }\n        col += 1;\n      }\n      row += 1;\n      col = 0;\n    }\n    setWinner(checkForWinner());\n    setSquares(newSquares);\n  }\n  const resetGame = () => {\n    setSquares(generateSquares());\n    setCurrentPlayer('x');\n    setNumSquaresFilled(0);\n    setWinner(null);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>{winner === null ? `Current Player ${ currentPlayer }` : `Winner is ${ winner }`}</h2>\n        <button onClick={resetGame}>Reset Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={updateSquares} />\n      </main>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}